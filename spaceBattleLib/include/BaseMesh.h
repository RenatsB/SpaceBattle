#ifndef BASEMESH_H_
#define BASEMESH_H_
#include <string>
//-------------------------------------------------------------------------------------------------------
/// @author Renats Bikmajevs
/// Modified from : --
/// @note This is a virtual interface class for mesh operations.
/// @note Most of the functions are either virtual with no implementaion or pure virtual.
/// @note Some of the functions were influenced by the host, although they still are not implemented.
//-------------------------------------------------------------------------------------------------------
class BaseMesh
{
public:
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default constructor.
  //-----------------------------------------------------------------------------------------------------
  BaseMesh()=default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default copy constructor.
  //-----------------------------------------------------------------------------------------------------
  BaseMesh(const BaseMesh&) = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default copy assignment operator.
  //-----------------------------------------------------------------------------------------------------
  BaseMesh& operator=(const BaseMesh&) = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default move constructor.
  //-----------------------------------------------------------------------------------------------------
  BaseMesh(BaseMesh&&) = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default move assignment operator.
  //-----------------------------------------------------------------------------------------------------
  BaseMesh& operator=(BaseMesh&&) = default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default virtual destructor.
  //-----------------------------------------------------------------------------------------------------
  virtual ~BaseMesh()=default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief (Host)Used to load a mesh, subclasses must call this base function.
  //-----------------------------------------------------------------------------------------------------
  virtual void load(const std::string &_fname)=0;
  //-----------------------------------------------------------------------------------------------------
  /// @brief (Host)Used to reset mesh data values.
  //-----------------------------------------------------------------------------------------------------
  virtual void reset()=0;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Set the name of this mesh object to the input value.
  /// @param [in]_new New name
  //-----------------------------------------------------------------------------------------------------
  virtual void setName(std::string _new);
  //-----------------------------------------------------------------------------------------------------
  /// @brief Get the currently stored name of this mesh object.
  //-----------------------------------------------------------------------------------------------------
  virtual std::string getName() const;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Set the ID of this mesh object to the input value.
  /// @param [in]_new New ID
  //-----------------------------------------------------------------------------------------------------
  virtual void setID(size_t _new);
  //-----------------------------------------------------------------------------------------------------
  /// @brief Get the currently stored name of this mesh object.
  //-----------------------------------------------------------------------------------------------------
  virtual size_t getID() const;
protected:
  //-----------------------------------------------------------------------------------------------------
  /// @brief The ID of this mesh object.
  //-----------------------------------------------------------------------------------------------------
  size_t m_id=0;
  //-----------------------------------------------------------------------------------------------------
  /// @brief The name of this mesh object.
  //-----------------------------------------------------------------------------------------------------
  std::string m_name="";
};

#endif //BASEMESH_H_
