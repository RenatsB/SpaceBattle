#ifndef BASEOBJECT_H_
#define BASEOBJECT_H_
#include <glm/vec3.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/ext.hpp>
#include <glm/glm.hpp>
#include <memory>
#include <vector>
enum class Tag {GAMEOBJECT, CAMERA, LIGHT, WEAPON, SPAWN, SHIP, OBJECT};
//-------------------------------------------------------------------------------------------------------
/// @author Renats Bikmajevs
/// @note This is a base pure virtual class for in-engine objects. Only time and Raycast do not derive from this
///-------------------------------------------------------------------------------------------------------
using namespace glm;
class BaseObject
{
public :
  BaseObject()=default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Default virtual destructor.
  //-----------------------------------------------------------------------------------------------------
  virtual ~BaseObject()=default;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Resets the object to defaults
  //-----------------------------------------------------------------------------------------------------
  virtual void reset() = 0;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Changes the ID of this object to the input value
  //-----------------------------------------------------------------------------------------------------
  virtual void changeID (const size_t _newID);
  //-----------------------------------------------------------------------------------------------------
  /// @brief Changes the name of this object to the input value
  //-----------------------------------------------------------------------------------------------------
  void setName(const std::string _new);
  //-----------------------------------------------------------------------------------------------------
  /// @brief Returns the currently stored name of this object
  //-----------------------------------------------------------------------------------------------------
  std::string getName() const;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Sets the parent of this object, adds this object as a child to parent
  /// @param [io]_new New parent to assign to this object
  //-----------------------------------------------------------------------------------------------------
  void setParent(BaseObject* _new);
  //-----------------------------------------------------------------------------------------------------
  /// @brief Returns the parent of this object
  //-----------------------------------------------------------------------------------------------------
  BaseObject* getParent() const;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Adds a child to the current object, adds this object as a parent to the child
  /// @brief If input pointer matches any of the existing children, it will be removed from the parent
  /// @param [io]_new New child to assign to this object
  //-----------------------------------------------------------------------------------------------------
  void addChild(BaseObject* _new);
  //-----------------------------------------------------------------------------------------------------
  /// @brief Changes the children of the current object, also assigns this object as parent to each child
  /// @param [io]_new New children to assign to this object
  //-----------------------------------------------------------------------------------------------------
  void setChildren(std::vector<BaseObject*> _new);
  //-----------------------------------------------------------------------------------------------------
  /// @brief Returns a vector all children of the current object
  //-----------------------------------------------------------------------------------------------------
  std::vector<BaseObject*> getChildren() const;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Returns the ID of this object
  //-----------------------------------------------------------------------------------------------------
  size_t getID () const;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Sets the active status switch of this object to the input value
  //-----------------------------------------------------------------------------------------------------
  void setActive(bool _new);
  //-----------------------------------------------------------------------------------------------------
  /// @brief Returns the active status of this object
  //-----------------------------------------------------------------------------------------------------
  bool isActive() const;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Sets the tag of this object to the input value
  //-----------------------------------------------------------------------------------------------------
  void setTag(Tag _new);
  //-----------------------------------------------------------------------------------------------------
  /// @brief Returns the tag of this object
  //-----------------------------------------------------------------------------------------------------
  Tag getTag() const;
protected :
  //-----------------------------------------------------------------------------------------------------
  /// @brief ID of this object, gets reassigned on higner levels if already in use
  //-----------------------------------------------------------------------------------------------------
  size_t m_id=0;
  //-----------------------------------------------------------------------------------------------------
  /// @brief A poiner to the Parent of this object
  //-----------------------------------------------------------------------------------------------------
  BaseObject* m_parent = nullptr;
  //-----------------------------------------------------------------------------------------------------
  /// @brief A vector of pointers to child objects of this object
  //-----------------------------------------------------------------------------------------------------
  std::vector<BaseObject*> m_children;
  //-----------------------------------------------------------------------------------------------------
  /// @brief The Name of this object
  //-----------------------------------------------------------------------------------------------------
  std::string m_name = "BaseObject";
  //-----------------------------------------------------------------------------------------------------
  /// @brief Active/Visibility status switch, true by default
  //-----------------------------------------------------------------------------------------------------
  bool m_isActive = true;
  //-----------------------------------------------------------------------------------------------------
  /// @brief Internal tag type identifier
  //-----------------------------------------------------------------------------------------------------
  Tag m_tag = Tag::OBJECT;
};
#endif //BASEMESH_H_
